<!DOCTYPE html>
<html>
    <head>
        <title>SimpleStateManager - Responsive state manager for JavaScript</title>
        <link rel="stylesheet" href="css/styles.css">
        <link href='http://fonts.googleapis.com/css?family=Lato:400,700' rel='stylesheet' type='text/css'>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <script src="js/vendor/respond.min.js"></script>

    </head>
    <body data-spy="scroll" data-target=".navbar" id="home">
        <a class="github-ribbon visible-desktop" href="https://github.com/SimpleStateManager/SimpleStateManager">
            <img style="position: fixed; top: 0; right: 0; border: 0; z-index: 9999;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png" alt="Fork me on GitHub">
        </a>

        <div class="navbar navbar-inverse navbar-fixed-top">
            <div class="navbar-inner">
                <div class="container">
                    <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="brand" href="index.html">SimpleStateManager {{package.version}}</a>

                    <div class="nav-collapse collapse">
                        <ul class="nav">
                            <li class="">
                                <a href="index.html">Get started</a>
                            </li>
                            <li class="active">
                                <a href="api.html">API</a>
                            </li>
                            <li class="">
                                <a href="extend.html">Extend</a>
                            </li>
                            <li class="">
                                <a href="debug.html">Debug Tool</a>
                            </li>
                            <li class="">
                                <a href="releases.html">Releases</a>
                            </li>
                            <li class="">
                                <a href="licence.html">Licence</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <header id="hero">
            <div class="container">
                <h1>API</h1>
            </div>
        </header>


        <section id="api">
            <div class="container">

                <h2>Add States</h2>
                <p>With SimpleStateManager you can add multiple states based on your needs, the most simple way to add a state is to simply pass the information about your state to SSM using <code>ssm.addState</code>. You are able to add as many states as you need, your states are able to overlap and your states can each have their own <code>onEnter</code>, <code>onLeave</code> and <code>onResize</code> events.</p>

                <pre>ssm.addState({
    id: 'mobile',
    query: '(max-width: 767px)',
    onEnter: function(){
        console.log('enter mobile');
    }
});

ssm.addState({
    id: 'tablet',
    query: '(min-width: 768px) and (max-width: 1023px)',
    onEnter: function(){
        console.log('enter tablet');
    }
});

ssm.addState({
    id: 'desktop',
    query: '(min-width: 1024px)',
    onEnter: function(){
        console.log('enter desktop');
    }
});</pre>

                <p>If you wish to use one command to add multiple states using one command you can use ssm.addStates to which you should pass an array of states.</p>

<pre>ssm.addStates([
{
    id: 'mobile',
    query: '(max-width: 767px)',
    onEnter: function(){
        console.log('enter mobile');
    }
},
{
    id: 'tablet',
    query: '(min-width: 768px)',
    query: '(max-width: 1023px)',
    onEnter: function(){
        console.log('enter tablet');
    }
},
{
    id: 'desktop',
    uery: '(min-width: 1024px)',
    onEnter: function(){
        console.log('enter desktop');
    }
}
]);</pre>
                <h3 class="h4">Note:</h4>

                <p>It is important to remember that the if you do not pass a media query using the <code>query</code> parameter the query will always match. This is useful for when you simply want to toggle whether a state should be active or not using custom config options you have added.</p>

                <h2>Remove States</h2>

                <p>Sometimes it may be necessary to remove a state, if we have the <strong>id</strong> for the state we can easily remove the state, to remove the mobile state from our above example we simply use:</p>

                <pre>ssm.removeState('mobile');</pre>

                <p>Or if you want to remove multiple at the same time</p>

                <pre>ssm.removeStates(['tablet', 'mobile']);</pre>
                
                <h2>Add a new config option</h2>
                <p>In SimpleStateManager options we pass to our states are called config options, we are able to add new config options to SimpleStateManager using <code>ssm.addConfigOption</code></p>

                <pre>ssm.addConfigOption({
    name: "touch", 
    test: function(){
        if(typeof this.state.touch === "boolean" && this.state.touch === Modernizr.touch){
            return true;
        }
        else{
            return false;
        }
    }
});</pre>
                <p>By default the <code>addConfigOption</code> method will run the test when it is matched, unmatched and during an active state's resize. If you would prefer the test were run only run once, potentially in the circumstance that the test is for a browser feature since the feature is either their or not then you can chose to use the <code>when</code> property with the value "once".</p>


                <pre>ssm.addConfigOption({
    name: "touch", 
    when: "once",
    test: function(){
        if(typeof this.state.touch === "boolean" && this.state.touch === Modernizr.touch){
            return true;
        }
        else{
            return false;
        }
    }
});</pre>

                <p>Some simple examples of tests that you could add to SimpleStateManager are:</p>
                
                <ul>
                    <li>Test to see if touch events are avaliable (see the code example above)</li>
                    <li>Test </li>
                </ul>

                <h2>Full API</h2>

                <table  class="api-table table table-hover table-condensed table-bordered">
                    <tr>
                        <th>Method</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>ssm.addState</td>
                        <td>Add a new state, expects an object literal, properties avaliable -  id (optional), minWidth (optional), maxWidth (optional), onEnter (optional), onResize (optional), onLeave (optional)</td>
                    </tr>
                    <tr>
                        <td>ssm.addStates</td>
                        <td>Add multiple new states, expects an array of object literals, properties avaliable -  id (optional), minWidth (optional), maxWidth (optional), onEnter (optional), onResize (optional), onLeave (optional)</td>
                    </tr>
                    <tr>
                        <td>ssm.removeState</td>
                        <td>Remove a state, expects one property, the id of the state to be removed.</td>
                    </tr>
                    <tr>
                        <td>ssm.removeStates</td>
                        <td>Remove multiple states, expects an array of strings</td>
                    </tr>
                    <tr>
                        <td>ssm.removeAllStates</td>
                        <td>Clears all states from SSM</td>
                    </tr>
                    <tr>
                        <td>ssm.getState</td>
                        <td>
                            <code>ssm.getState()</code> takes a single parameter
                            <pre><code>ssm.getState('mobile');</code></pre>
                        </td>
                    </tr>
                    <tr>
                        <td>ssm.getStates</td>
                        <td>
                            By default <code>ssm.getStates()</code> will return all the states added to SSM however you optionally can pass an array of ID's of the states you want e.g
                            <pre><code>ssm.getStates([
    'mobile',
    'desktop'
]);</code></pre>
                        </td>
                    </tr>
                    <tr>
                        <td>ssm.isActive</td>
                        <td>Check if a state is active using the ID you assigned.</td>
                    </tr>
                    <tr>
                        <td>ssm.addConfigOption</td>
                        <td>SSM allows you to define new rules by which a state can be enabled and disabled using <code>ssm.addConfigOption</code>. The method takes an object with 2 values as the parameter, firstly the name of the config option and secondly the method to test the option. Please note the test must return true or false to allow SSM to know if the test has passed or failed.  A typical example of how you can add a test.
                            <pre><code>ssm.addConfigOption({
    name: "minHeight",
    test: function(){
        return true;
    }
});</code></pre></td>
                    </tr>
                </table>
            </div>
        </section>
        <footer>
            <div class="container">
                <p>SimpleStateManager is an Open Source Project licenced under the MIT licence</p>
            </div>
        </footer>

        <script src="_ssm/dist/ssm.min.js"></script>
        <script src="js/vendor/jquery.min.js"></script>
        <script src="js/vendor/bootstrap-collapse.js"></script>
        <script src="js/script.js"></script>
        <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-42981349-1', 'simplestatemanager.com');
            ga('send', 'pageview');
        </script>
    </body>
</html>